{"backend_state":"running","connection_file":"/projects/6a848d56-5da1-43fb-bfc9-9172977ceeb4/.local/share/jupyter/runtime/kernel-214445ab-a7c7-45ee-94f9-ac6008cd9c79.json","kernel":"python3-ubuntu","kernel_error":"","kernel_state":"busy","kernel_usage":{"cpu":0,"memory":0},"metadata":{"colab":{"collapsed_sections":["acolMI3gVF8w","EL8bZ5XLVF8z"],"name":"FlashKarate!.ipynb","provenance":[]},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.2"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1656430907709,"exec_count":1,"id":"1efe0c","input":"\nKarate = {\"Shezentai\": \"Natural Stance\", \"Choku-Zuki\": \"Straight Punch\", \"Oi-Zuki\": \"Front Lunge Punch\", \"Gyaku-Zuki\": \"Reverse Punch\", \"Gedan Barai\": \"Down Block\", \"Age-Uke\": \"Rising Block\"}","kernel":"python3-ubuntu","metadata":{"id":"hTUm1rPfVF8t"},"pos":17,"start":1656430907701,"state":"done","type":"cell"}
{"cell_type":"code","end":1656430913071,"exec_count":2,"id":"597203","input":"for key, value in Karate.items():\n    print(key)","kernel":"python3-ubuntu","metadata":{"id":"wlY-h7eVVF8u"},"output":{"0":{"name":"stdout","text":"Shezentai\nChoku-Zuki\nOi-Zuki\nGyaku-Zuki\nGedan Barai\nAge-Uke\n"}},"pos":19,"start":1656430913063,"state":"done","type":"cell"}
{"cell_type":"code","end":1656431275327,"exec_count":3,"id":"b35468","input":"import random\n\nlist = [\"Shezentai\",\"Choku-Zuki\",\"Oi-Zuki\",\"Gyaku-Zuki\", \"Gedan Barai\", \"Age-Uke\"]\nrandom.shuffle(list)\n\nprint(list)","kernel":"python3-ubuntu","metadata":{"id":"w-IuZlrVVF8x"},"output":{"0":{"name":"stdout","text":"['Shezentai', 'Oi-Zuki', 'Gedan Barai', 'Gyaku-Zuki', 'Age-Uke', 'Choku-Zuki']\n"}},"pos":22,"start":1656431275317,"state":"done","type":"cell"}
{"cell_type":"code","end":1656435725117,"id":"3b7307","input":"list = [\"Shezentai\",\"Choku-Zuki\",\"Oi-Zuki\",\"Gyaku-Zuki\", \"Gedan Barai\", \"Age-Uke\"]\n\nimport random\nprint(random.choice(list))","kernel":"python3-ubuntu","metadata":{"id":"PyOMxguiVF8v"},"pos":20,"start":1656435725117,"state":"done","type":"cell"}
{"cell_type":"code","end":1656436793122,"exec_count":24,"id":"e00f7f","input":"#\n#Shezentai: Natural Stance\n#Choku-Zuki: Straight Punch\n#Oi-Zuki: Front Lunge Punch\n#Gyaku-Zuki: Reverse Punch\n#Gedan Barai: Down Block\n#Age-Uke: Rising Block\n#\nimport random\ndict = {\"Shezentai\": \"Natural Stance\", \"Choku-Zuki\": \"Straight Punch\", \"Oi-Zuki\": \"Front Lunge Punch\", \"Gyaku-Zuki\": \"Reverse Punch\", \"Gedan Barai\": \"Down Block\", \"Age-Uke\": \"Rising Block\"}\nlist = [\"Shezentai\",\"Choku-Zuki\",\"Oi-Zuki\",\"Gyaku-Zuki\", \"Gedan Barai\", \"Age-Uke\"]\nrandom.shuffle(list)\ncounter = 0\n\nfor key in list:\n    print(key)\n    print(dict[key])\n    guess = input('enter your guess')\n    if guess == dict[key]:\n        print(\"correct!\")\n        counter += 1\n    else:\n        print(\"incorrect\")\n    print('_'*25)   \nprint(\"you got\"+ counter + \"correct out of 6!\")","kernel":"python3-ubuntu","metadata":{"cocalc":{"outputs":{"1":{"name":"input","opts":{"password":false,"prompt":"ANSWER: "},"output_type":"stream","value":""},"11":{"name":"input","opts":{"password":false,"prompt":"ANSWER: "},"output_type":"stream","value":""},"3":{"name":"input","opts":{"password":false,"prompt":"ANSWER: "},"output_type":"stream","value":""},"5":{"name":"input","opts":{"password":false,"prompt":"ANSWER: "},"output_type":"stream","value":""},"7":{"name":"input","opts":{"password":false,"prompt":"ANSWER: "},"output_type":"stream","value":""},"9":{"name":"input","opts":{"password":false,"prompt":"ANSWER: "},"output_type":"stream","value":""}}},"id":"LAIfkxd4VF80"},"output":{"0":{"name":"stdout","text":"Gedan Barai\nDown Block\n"},"1":{"name":"input","opts":{"password":false,"prompt":"enter your guess"}},"2":{"ename":"KeyboardInterrupt","evalue":"Interrupted by user","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-24-7b261074f2c7>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     16\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdict\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 18\u001b[0;31m     \u001b[0mguess\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'enter your guess'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     19\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mguess\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"correct!\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36mraw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m    858\u001b[0m                 \u001b[0;34m\"raw_input was called, but this frontend does not support input requests.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    859\u001b[0m             )\n\u001b[0;32m--> 860\u001b[0;31m         return self._input_request(str(prompt),\n\u001b[0m\u001b[1;32m    861\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    862\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_header\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m    891\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    892\u001b[0m                 \u001b[0;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 893\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Interrupted by user\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    894\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    895\u001b[0m                 \u001b[0;32mbreak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: Interrupted by user"]}},"pos":24,"start":1656436154145,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"654128","input":"# print the values of a dictionary\nprint(my_dictionary.values())","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vetkiJW3ea8T","outputId":"88eeccc4-5786-46d4-db6b-335a4347247c"},"output":{"0":{"name":"stdout","output_type":"stream","text":"dict_values(['a domesticated carnivorous mammal that typically has a long snout', 'a small domesticated carnivorous mammal with soft fur', 'a rabbit, especially a young one.', 'wolves of a large variety found mainly in northern North America, with gray brindled fur.'])\n"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"666647","input":"#access all of the keys and store as a list\nanimals = list(my_dictionary.keys())\nprint(animals)","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OZPVqiR8Yzxk","outputId":"4bcfef45-cc37-409b-c87d-76d12e805c8a"},"output":{"0":{"name":"stdout","output_type":"stream","text":"['dog', 'cat', 'bunny', 'timberwolves']\n"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"688ec3","input":"# Basic usage of the str.format() method looks like this:\nprint('We are the {} who say \"{}!\"'.format('knights', 'Ni'))","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nj56EG_0fpHN","outputId":"cbfdf989-708e-4b36-b5f3-8f7760e47c76"},"output":{"0":{"name":"stdout","output_type":"stream","text":"We are the knights who say \"Ni!\"\n"}},"pos":11,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"74084a","input":"# If keyword arguments are used in the str.format() method, their values are referred to by using the name of the argument.\nprint('This {food} is {adjective}.'.format(food='spam', adjective='absolutely horrible'))","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WTuHIy5Wf6gg","outputId":"33dc1f68-d3d1-41db-8abb-82fe710cec58"},"output":{"0":{"name":"stdout","output_type":"stream","text":"This spam is absolutely horrible.\n"}},"pos":14,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"756410","input":"# A number in the brackets can be used to refer to the position of the object passed into the str.format() method.\nprint('{0} and {1}'.format('spam', 'eggs'))","metadata":{"id":"tbZG23SufsPA"},"pos":12,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"8c8f3e","input":"# access the value from a dictionary key\nprint(\"a dog is...\", my_dictionary[\"dog\"])","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dzYfo-ciVF8r","outputId":"ffd2aefa-ce80-465b-c86e-eeb4dce7fcd3"},"output":{"0":{"name":"stdout","output_type":"stream","text":"a dog is... a domesticated carnivorous mammal that typically has a long snout\n"}},"pos":5,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"9f19a0","input":"\nKarate = {\"Shezentai\": \"Natural Stance\", \"Choku-Zuki\": \"Straight Punch\", \"Oi-Zuki\": \"Front Lunge Punch\", \"Gyaku-Zuki\": \"Reverse Punch\", \"Gedan Barai\": \"Down Block\", \"Age-Uke\": \"Rising Block\"}","metadata":{"id":"Dj_Cw7cefe-H"},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"dbb02a","input":"'''\nyour code here: experiment with string formatting\n'''","metadata":{"id":"cVE5APVdfttS"},"pos":15,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e5c4b1","input":"# you can use these keys to access the dictionary\nfor i in animals:\n  print(i + \": \", my_dictionary[i])","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iWans4X-Y9qL","outputId":"ecf572ad-6727-4b73-8495-e5065acac24b"},"output":{"0":{"name":"stdout","output_type":"stream","text":"dog:  a domesticated carnivorous mammal that typically has a long snout\ncat:  a small domesticated carnivorous mammal with soft fur\nbunny:  a rabbit, especially a young one.\ntimberwolves:  wolves of a large variety found mainly in northern North America, with gray brindled fur.\n"}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e641df","input":"# create a dictionary with key value pairs. I'm just going to use some words and defintions \nmy_dictionary = {\"dog\": \"a domesticated carnivorous mammal that typically has a long snout\",\n                 \"cat\": \"a small domesticated carnivorous mammal with soft fur\",\n                 \"bunny\": \"a rabbit, especially a young one.\",\n                 \"timberwolves\": \"wolves of a large variety found mainly in northern North America, with gray brindled fur.\"\n                 }","metadata":{"id":"3x-2-EJ4Xi7t"},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"f0c795","input":"print('{1} and {0}'.format('spam', 'eggs'))","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zM8v0k_Wf0hr","outputId":"9b19dcfe-f873-4947-8b8a-8caaf0ff9187"},"output":{"0":{"name":"stdout","output_type":"stream","text":"eggs and spam\n"}},"pos":13,"type":"cell"}
{"cell_type":"code","exec_count":29,"id":"bb7d31","input":"\n#Shezentai: Natural Stance\n#Choku-Zuki: Straight Punch\n#Oi-Zuki: Front Lunge Punch\n#Gyaku-Zuki: Reverse Punch\n#Gedan Barai: Down Block\n#Age-Uke: Rising Block\n\nimport random\ndef func():\n    counter = 0\n    for key in list:\n        print(key)\n        print(dict[key])\n        guess = input('enter your guess')\n        if guess == dict[key]:\n            print(\"correct!\")\n            counter += 1\n        else:\n            print(\"incorrect\")\n        print('_'*25)   \n        \n        \n\n\ndict = {\"Shezentai\": \"Natural Stance\", \"Choku-Zuki\": \"Straight Punch\", \"Oi-Zuki\": \"Front Lunge Punch\", \"Gyaku-Zuki\": \"Reverse Punch\", \"Gedan Barai\": \"Down Block\", \"Age-Uke\": \"Rising Block\"}\nlist = [\"Shezentai\",\"Choku-Zuki\",\"Oi-Zuki\",\"Gyaku-Zuki\", \"Gedan Barai\", \"Age-Uke\"]\nrandom.shuffle(list)\nfunc()\nprint('you got',counter, \"out of 6 correct!\")\nwhile True:\n    play = input(\"do you wanna play?\")\n    if play == \"yes\":\n        func()\n    else:\n        break\nprint(\"Thanks for playing!\")\n\n","kernel":"python3-ubuntu","metadata":{"cocalc":{"outputs":{"0":{"name":"input","opts":{"password":false,"prompt":"Play game? ('y' to continue) "},"output_type":"stream","value":""},"10":{"name":"input","opts":{"password":false,"prompt":"ANSWER: "},"output_type":"stream","value":"d"},"12":{"name":"input","opts":{"password":false,"prompt":"ANSWER: "},"output_type":"stream","value":"f"},"14":{"name":"input","opts":{"password":false,"prompt":"Play again? ('y' to continue) "},"output_type":"stream","value":"n"},"2":{"name":"input","opts":{"password":false,"prompt":"ANSWER: "},"output_type":"stream","value":"d"},"4":{"name":"input","opts":{"password":false,"prompt":"ANSWER: "},"output_type":"stream","value":"a"},"6":{"name":"input","opts":{"password":false,"prompt":"ANSWER: "},"output_type":"stream","value":"f"},"8":{"name":"input","opts":{"password":false,"prompt":"ANSWER: "},"output_type":"stream","value":"a"}}},"id":"unJkdlnQVF81"},"output":{"0":{"name":"stdout","text":"Shezentai\nNatural Stance\n"},"1":{"name":"input","opts":{"password":false,"prompt":"enter your guess"},"value":"hi"},"10":{"name":"stdout","text":"incorrect\n_________________________\nAge-Uke\nRising Block\n"},"11":{"name":"input","opts":{"password":false,"prompt":"enter your guess"},"value":"hi"},"12":{"name":"input","opts":{"password":false,"prompt":"do you wanna play?"}},"13":{"name":"stdout","text":"incorrect\n_________________________\nyou got 0 out of 6 correct!\n","value":"yes"},"14":{"name":"stdout","text":"Shezentai\nNatural Stance\n"},"15":{"name":"input","opts":{"password":false,"prompt":"enter your guess"}},"2":{"name":"stdout","text":"incorrect\n_________________________\nGedan Barai\nDown Block\n"},"3":{"name":"input","opts":{"password":false,"prompt":"enter your guess"},"value":"hi"},"4":{"name":"stdout","text":"incorrect\n_________________________\nGyaku-Zuki\nReverse Punch\n"},"5":{"name":"input","opts":{"password":false,"prompt":"enter your guess"},"value":"hi"},"6":{"name":"stdout","text":"incorrect\n_________________________\nOi-Zuki\nFront Lunge Punch\n"},"7":{"name":"input","opts":{"password":false,"prompt":"enter your guess"},"value":"hi"},"8":{"name":"input","opts":{"password":false,"prompt":"enter your guess"}},"9":{"name":"stdout","text":"incorrect\n_________________________\nChoku-Zuki\nStraight Punch\n","value":"hi"}},"pos":26,"scrolled":true,"start":1656436944946,"state":"busy","type":"cell"}
{"cell_type":"markdown","id":"331bd4","input":"## Some python help\n\nHere is some python code that might help you on your journey! Mainly you should have a good idea of how dictionaries function, since they work pretty similar to flashcards.","metadata":{"id":"RHa0Vb_rXjQr"},"pos":2,"type":"cell"}
{"cell_type":"markdown","id":"4cb4d9","input":"## The Stances!\n\nHere are the stances:\n\n* Shezentai: Natural Stance\n* Choku-Zuki: Straight Punch\n* Oi-Zuki: Front Lunge Punch\n* Gyaku-Zuki: Reverse Punch\n* Gedan Barai: Down Block\n* Age-Uke: Rising Block\n\nIf you're curious here are some photos of the stances. \n<br>\n<br>\n\n<center />\n<img src=\"https://globalmartialarts.university/wp-content/uploads/2021/01/Shotokan-Beginners-Guide-Infographic-2.jpg\" width=560 height=660 />\n\n","metadata":{"id":"cuw7LZy3VF8q"},"pos":1,"type":"cell"}
{"cell_type":"markdown","id":"61ed69","input":"## Task 3: Set up the game\n\nNow here is where we set up the game!\n\n* Create a variable to keep track of how many guesses user has correct\n* Create a loop that:\n\n> 1. Goes through each word in the list of keys and print this word for the user to guess.\n\n2. Asks the user to `input` their answer (you might have to look up how to get input from a user in python).\n3. Checks whether their answer is right, and adds 1 to the variable for correct guesses \n4. Goes to the next word and repeats steps 1-3.\n\n* After the loop, print how many answers the users got correct and how many they got wrong.\n\n<br>\n\nNote: For repetitive tasks in python, we usually use a `while` or a `for` loop. `While` loops continue executing code in a loop until a certain condition is met, and `for` loops typically are used for iterating across a piece of data. \n\n> DISCUSS: Discuss with your team and instructor which type of loop would be better for this case.\n\n","metadata":{"id":"EL8bZ5XLVF8z"},"pos":23,"type":"cell"}
{"cell_type":"markdown","id":"a87086","input":"## Task 1: Create the Flashcards \nIn this section you should create your flashcards using a dictionary that includes each karate stance (key) and its definition (value).\n\nExperiment by using some dictionary functions and save the keys of the dictionary in a list.","metadata":{"id":"HxiI3weuVF8t"},"pos":16,"type":"cell"}
{"cell_type":"markdown","id":"ab8bb3","input":"## Task 4: Put everything together. \n\nCreate an outer loop to ask the user if they want to play the game. If the answer is yes, keep running the program. Keep doing this until they enter something other than yes. \n\nConsolidate all of your other code inside of this loop!","metadata":{"id":"mYVCZ2RKVF80"},"pos":25,"type":"cell"}
{"cell_type":"markdown","id":"ce7ac2","input":"### String Formatting\n\nChange the code below to see how you can format strings.\n\n","metadata":{"id":"wDh9B_Prfkgr"},"pos":10,"type":"cell"}
{"cell_type":"markdown","id":"d6d262","input":"## Task 2: Shuffle the list \n\nAt this point we have a \"deck\" of flashcards (a list of key values for our dictionary). Now you should do some research on how we can `shuffle()` this deck. \n\nWe recommend checking out python's [`random` library](https://docs.python.org/3/library/random.html) to see how to shuffle a list! You also could google \"how to shuffle a list python\".\n\n","metadata":{"id":"acolMI3gVF8w"},"pos":21,"type":"cell"}
{"cell_type":"markdown","id":"dcc2a4","input":"### Dictionaries Review","metadata":{"id":"yr1mQTCVfmhM"},"pos":3,"type":"cell"}
{"cell_type":"markdown","id":"f04622","input":"# Build a Flashcard Game! \n\nWe will be building a flashcard guessing game where users can guess fighting stances in Karate.\n\n\n\n> Here are the rules:\n* The user will be given the name of a fighting stance and will have to guess its definition/description.\n* Each time the user guesses the description right, the user gets a point.\n* The game will continue until there are no more stance descriptions left to guess.\n* After running out of stances, the user will see how many points they earn and will be asked if they want to play again!\n\nYou can think of this as having the front of the flash card being a fighting stance and the back of the flash card being it's description. Let's get started.\n\n\n\n","metadata":{"id":"jQu4NqtgVF8l"},"pos":0,"type":"cell"}
{"end":1656436793063,"id":"f9a01b","input":"func()","kernel":"python3-ubuntu","pos":28,"start":1656436793063,"state":"done","type":"cell"}
{"id":"1c061a","input":"","pos":27,"type":"cell"}
{"id":"20fe5d","input":"","pos":18,"type":"cell"}
{"id":0,"time":1656431824400,"type":"user"}
{"last_load":1656430590118,"type":"file"}