{"backend_state":"init","connection_file":"/projects/6a848d56-5da1-43fb-bfc9-9172977ceeb4/.local/share/jupyter/runtime/kernel-c430a4bd-7af9-40a8-8b24-3d4f5e893ae0.json","kernel":"python3-ubuntu","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"colab":{"collapsed_sections":["acolMI3gVF8w","EL8bZ5XLVF8z"],"name":"FlashKarate!.ipynb","provenance":[]},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.10"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"2f7237","input":"# If keyword arguments are used in the str.format() method, their values are referred to by using the name of the argument.\nprint('This {food} is {adjective}.'.format(food='spam', adjective='absolutely horrible'))","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WTuHIy5Wf6gg","outputId":"33dc1f68-d3d1-41db-8abb-82fe710cec58"},"output":{"0":{"name":"stdout","output_type":"stream","text":"This spam is absolutely horrible.\n"}},"pos":14,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"54f97a","input":"# print the values of a dictionary\nprint(my_dictionary.values())","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vetkiJW3ea8T","outputId":"88eeccc4-5786-46d4-db6b-335a4347247c"},"output":{"0":{"name":"stdout","output_type":"stream","text":"dict_values(['a domesticated carnivorous mammal that typically has a long snout', 'a small domesticated carnivorous mammal with soft fur', 'a rabbit, especially a young one.', 'wolves of a large variety found mainly in northern North America, with gray brindled fur.'])\n"}},"pos":7,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"5feaec","input":"# access the value from a dictionary key\nprint(\"a dog is...\", my_dictionary[\"dog\"])","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dzYfo-ciVF8r","outputId":"ffd2aefa-ce80-465b-c86e-eeb4dce7fcd3"},"output":{"0":{"name":"stdout","output_type":"stream","text":"a dog is... a domesticated carnivorous mammal that typically has a long snout\n"}},"pos":5,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"9bfc24","input":"# you can use these keys to access the dictionary\nfor i in animals:\n  print(i + \": \", my_dictionary[i])","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iWans4X-Y9qL","outputId":"ecf572ad-6727-4b73-8495-e5065acac24b"},"output":{"0":{"name":"stdout","output_type":"stream","text":"dog:  a domesticated carnivorous mammal that typically has a long snout\ncat:  a small domesticated carnivorous mammal with soft fur\nbunny:  a rabbit, especially a young one.\ntimberwolves:  wolves of a large variety found mainly in northern North America, with gray brindled fur.\n"}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"a00e87","input":"#access all of the keys and store as a list\nanimals = list(my_dictionary.keys())\nprint(animals)","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OZPVqiR8Yzxk","outputId":"4bcfef45-cc37-409b-c87d-76d12e805c8a"},"output":{"0":{"name":"stdout","output_type":"stream","text":"['dog', 'cat', 'bunny', 'timberwolves']\n"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"c64f63","input":"# create a dictionary with key value pairs. I'm just going to use some words and defintions \nmy_dictionary = {\"dog\": \"a domesticated carnivorous mammal that typically has a long snout\",\n                 \"cat\": \"a small domesticated carnivorous mammal with soft fur\",\n                 \"bunny\": \"a rabbit, especially a young one.\",\n                 \"timberwolves\": \"wolves of a large variety found mainly in northern North America, with gray brindled fur.\"\n                 }\n","metadata":{"id":"3x-2-EJ4Xi7t"},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"c82869","input":"","pos":26,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"cec788","input":"'''\nyour code here: create a dictionary with a few words from a different language (use google translate as needed) and their translation!\n'''\nlang = {\"eight\":\"huit\",\"napkin\":\"serviette\", \"chair\": \"chaise\", \"man\": \"homme\", \"table\": \"table\", \"computer\": \"ordinateur\"}","metadata":{"id":"Dj_Cw7cefe-H"},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"d8c571","input":"print('{1} and {0}'.format('spam', 'eggs'))","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zM8v0k_Wf0hr","outputId":"9b19dcfe-f873-4947-8b8a-8caaf0ff9187"},"output":{"0":{"name":"stdout","output_type":"stream","text":"eggs and spam\n"}},"pos":13,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"8f6be0","input":"#put all of the keys into a list so you have a \"deck\" of flashcards.\nNames = list(karate.keys())\nprint(Names)","metadata":{"id":"PyOMxguiVF8v"},"output":{"0":{"name":"stdout","output_type":"stream","text":"['Shezentai', 'Choku-Zuki', 'Oi-Zuki', 'Gyaku-Zuki', 'Gedan Barai', 'Age-Uke']\n"}},"pos":19,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"f42edb","input":"# shuffle your deck of flashcards (list of keys) and print the new order!\nimport random\nrandom.shuffle(Names)\nprint(Names)","metadata":{"id":"w-IuZlrVVF8x"},"output":{"0":{"name":"stdout","output_type":"stream","text":"['Oi-Zuki', 'Shezentai', 'Gedan Barai', 'Age-Uke', 'Choku-Zuki', 'Gyaku-Zuki']\n"}},"pos":21,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"d2fef2","input":"# Basic usage of the str.format() method looks like this:\nprint('We are the {} who say \"{}!\"'.format('dogs', 'Ni'))","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nj56EG_0fpHN","outputId":"cbfdf989-708e-4b36-b5f3-8f7760e47c76"},"output":{"0":{"name":"stdout","output_type":"stream","text":"We are the dogs who say \"Ni!\"\n"}},"pos":11,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"85adee","input":"# A number in the brackets can be used to refer to the position of the object passed into the str.format() method.\nprint('{0} and {1}'.format('spam', 'eggs'))","metadata":{"id":"tbZG23SufsPA"},"output":{"0":{"name":"stdout","output_type":"stream","text":"spam and eggs\n"}},"pos":12,"type":"cell"}
{"cell_type":"code","exec_count":32,"id":"4a53f2","input":"Stances = list(karate.values())\nimport random\nrandom.shuffle(Stances)\n#Set variable for correct guesses\ncounter = 0\nprint(Stances)\n#Create a loop that iterates through the list of keys\nfor key, value in karate.items():\n    print(key)\n    guess = input('enter your guess, hint is above')\n    if value == guess:\n        print('you got it right')\n        counter += 1\n    else:\n        print('wrong, the answer is', value)\n    print(''*25)\nprint('number correct:', counter)\n    #inside loop: print the word for the user to guess the description of and get the user's guess for it's description.\n\n\n    #print the actual description of the word.\n\n\n    #if the user is correct, let them know and add 1 point to their correct guesses.\n\n    #otherwise, let the user know they are wrong and don't add any points to their correct guesses \n\n    #after each round print a line separator by uncommenting the following line\n    # print('_'*25)   \n\n# tell the user how many they had correct out of total","metadata":{"cocalc":{"outputs":{"1":{"name":"input","opts":{"password":false,"prompt":"enter your guess, hint is above"},"output_type":"stream","value":"Natural Stance"},"10":{"name":"input","opts":{"password":false,"prompt":"enter your guess, hint is above"},"output_type":"stream"},"11":{"name":"input","opts":{"password":false,"prompt":"ANSWER: "},"output_type":"stream","value":""},"3":{"name":"input","opts":{"password":false,"prompt":"enter your guess, hint is above"},"output_type":"stream","value":"Reverse Punch"},"5":{"name":"input","opts":{"password":false,"prompt":"enter your guess, hint is above"},"output_type":"stream","value":"Front Lunge Punch"},"7":{"name":"input","opts":{"password":false,"prompt":"enter your guess, hint is above"},"output_type":"stream","value":"a"},"8":{"name":"input","opts":{"password":false,"prompt":"enter your guess, hint is above"},"output_type":"stream"},"9":{"name":"input","opts":{"password":false,"prompt":"ANSWER: "},"output_type":"stream","value":""}}},"id":"LAIfkxd4VF80"},"output":{"0":{"name":"stdout","output_type":"stream","text":"['Front Lunge Punch', 'Rising Block', 'Reverse Punch', 'Down Block', 'Straight Punch', 'Natural Stance']\nShezentai\n"},"1":{"name":"input","opts":{"password":false,"prompt":"enter your guess, hint is above"},"output_type":"stream","value":"Natural Stance"},"10":{"name":"input","opts":{"password":false,"prompt":"enter your guess, hint is above"},"output_type":"stream"},"11":{"name":"input","opts":{"password":false,"prompt":"ANSWER: "},"output_type":"stream","value":""},"12":{"name":"stdout","output_type":"stream","text":"wrong, the answer is Rising Block\n\nnumber correct: 2\n"},"2":{"name":"stdout","output_type":"stream","text":"you got it right\n\nChoku-Zuki\n"},"3":{"name":"input","opts":{"password":false,"prompt":"enter your guess, hint is above"},"output_type":"stream","value":"Reverse Punch"},"4":{"name":"stdout","output_type":"stream","text":"wrong, the answer is Straight Punch\n\nOi-Zuki\n"},"5":{"name":"input","opts":{"password":false,"prompt":"enter your guess, hint is above"},"output_type":"stream","value":"Front Lunge Punch"},"6":{"name":"stdout","output_type":"stream","text":"you got it right\n\nGyaku-Zuki\n"},"7":{"name":"input","opts":{"password":false,"prompt":"enter your guess, hint is above"},"output_type":"stream","value":"a"},"8":{"name":"input","opts":{"password":false,"prompt":"enter your guess, hint is above"},"output_type":"stream"},"9":{"name":"input","opts":{"password":false,"prompt":"ANSWER: "},"output_type":"stream","value":""}},"pos":23,"type":"cell"}
{"cell_type":"code","exec_count":36,"id":"42ebfa","input":"# imports\nyn=input('Do you want to play a game?')\nwhile \"yes\"==yn:\n    Stances = list(karate.values())\n    import random\n    random.shuffle(Stances)\n    counter = 0\n    print(Stances)\n    for key, value in karate.items():\n        print(key)\n        guess = input('enter your guess, hint is above')\n        if value == guess:\n            print('you got it right')\n            counter += 1\n        else:\n            print('wrong, the answer is', value)\n        print(''*25)\n    print('number correct:', counter)\n    yn=input('Do you want to play again?')\nprint('Thanks for playing!')\n#ask user if they want to play\n\n#if the user's answer is yes or still yes, play the game again\n\n    # create dictionary of key/pairs (copy code from task 1)\n\n    #turns dictionary keys into a list (copy code from task 1)\n\n    #shuffle list (copy code from task 2)\n\n    #play a round of the game (copy code from task 3)\n\n    # final score\n\n    # ask user to play again and get their input. If they say yes, play again. Otherwise, exit the loop!\n\n\n#When the user is done playing, tell them thanks with a print statement below!","metadata":{"cocalc":{"outputs":{"0":{"name":"input","opts":{"password":false,"prompt":"Do you want to play a game?"},"output_type":"stream","value":"yes"},"10":{"name":"input","opts":{"password":false,"prompt":"enter your guess, hint is above"},"output_type":"stream","value":"a"},"11":{"name":"input","opts":{"password":false,"prompt":"enter your guess, hint is above"},"output_type":"stream"},"12":{"name":"input","opts":{"password":false,"prompt":"ANSWER: "},"output_type":"stream","value":"f"},"14":{"name":"input","opts":{"password":false,"prompt":"Do you want to play again?"},"output_type":"stream","value":"no"},"2":{"name":"input","opts":{"password":false,"prompt":"enter your guess, hint is above"},"output_type":"stream","value":"Natural Stance"},"4":{"name":"input","opts":{"password":false,"prompt":"enter your guess, hint is above"},"output_type":"stream","value":"Straight Punch"},"6":{"name":"input","opts":{"password":false,"prompt":"enter your guess, hint is above"},"output_type":"stream","value":"a"},"8":{"name":"input","opts":{"password":false,"prompt":"enter your guess, hint is above"},"output_type":"stream","value":"a"}}},"id":"unJkdlnQVF81"},"output":{"0":{"name":"input","opts":{"password":false,"prompt":"Do you want to play a game?"},"output_type":"stream","value":"yes"},"1":{"name":"stdout","output_type":"stream","text":"['Front Lunge Punch', 'Down Block', 'Straight Punch', 'Natural Stance', 'Rising Block', 'Reverse Punch']\nShezentai\n"},"10":{"name":"input","opts":{"password":false,"prompt":"enter your guess, hint is above"},"output_type":"stream","value":"a"},"11":{"name":"input","opts":{"password":false,"prompt":"enter your guess, hint is above"},"output_type":"stream"},"12":{"name":"input","opts":{"password":false,"prompt":"ANSWER: "},"output_type":"stream","value":"f"},"13":{"name":"stdout","output_type":"stream","text":"wrong, the answer is Rising Block\n\nnumber correct: 2\n"},"14":{"name":"input","opts":{"password":false,"prompt":"Do you want to play again?"},"output_type":"stream","value":"no"},"15":{"name":"stdout","output_type":"stream","text":"Thanks for playing!\n"},"2":{"name":"input","opts":{"password":false,"prompt":"enter your guess, hint is above"},"output_type":"stream","value":"Natural Stance"},"3":{"name":"stdout","output_type":"stream","text":"you got it right\n\nChoku-Zuki\n"},"4":{"name":"input","opts":{"password":false,"prompt":"enter your guess, hint is above"},"output_type":"stream","value":"Straight Punch"},"5":{"name":"stdout","output_type":"stream","text":"you got it right\n\nOi-Zuki\n"},"6":{"name":"input","opts":{"password":false,"prompt":"enter your guess, hint is above"},"output_type":"stream","value":"a"},"7":{"name":"stdout","output_type":"stream","text":"wrong, the answer is Front Lunge Punch\n\nGyaku-Zuki\n"},"8":{"name":"input","opts":{"password":false,"prompt":"enter your guess, hint is above"},"output_type":"stream","value":"a"},"9":{"name":"stdout","output_type":"stream","text":"wrong, the answer is Reverse Punch\n\nGedan Barai\n"}},"pos":25,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"241e16","input":"'''\nyour code here: experiment with string formatting\n'''\nverb = input(\"Give me a verb\")\nnoun = input(\"Give me a noun\")\nadj = input(\"Give me an adjective\")\nprint('The {adj} {noun} is {verb}' .format(verb=verb, noun=noun, adj=adj))","metadata":{"cocalc":{"outputs":{"0":{"name":"input","opts":{"password":false,"prompt":"Give me a verb"},"output_type":"stream","value":"calling"},"1":{"name":"input","opts":{"password":false,"prompt":"Give me an noun"},"output_type":"stream","value":"potato"},"2":{"name":"input","opts":{"password":false,"prompt":"Give me an adjective"},"output_type":"stream","value":"green"}}},"id":"cVE5APVdfttS"},"output":{"0":{"name":"input","opts":{"password":false,"prompt":"Give me a verb"},"output_type":"stream","value":"calling"},"1":{"name":"input","opts":{"password":false,"prompt":"Give me an noun"},"output_type":"stream","value":"potato"},"2":{"name":"input","opts":{"password":false,"prompt":"Give me an adjective"},"output_type":"stream","value":"green"},"3":{"name":"stdout","output_type":"stream","text":"The green potato is calling\n"}},"pos":15,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"5e359a","input":"# create your flashcards with key: Karate Stance and value: description\nkarate = {\"Shezentai\":\"Natural Stance\", \"Choku-Zuki\":\"Straight Punch\", \"Oi-Zuki\":\"Front Lunge Punch\", \"Gyaku-Zuki\":\"Reverse Punch\", \"Gedan Barai\":\"Down Block\", \"Age-Uke\":\"Rising Block\"}\nprint(karate)","metadata":{"id":"hTUm1rPfVF8t"},"output":{"0":{"name":"stdout","output_type":"stream","text":"{'Shezentai': 'Natural Stance', 'Choku-Zuki': 'Straight Punch', 'Oi-Zuki': 'Front Lunge Punch', 'Gyaku-Zuki': 'Reverse Punch', 'Gedan Barai': 'Down Block', 'Age-Uke': 'Rising Block'}\n"}},"pos":17,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"07ec0b","input":"# print all the keys in your dictionary\nprint(karate.keys())","metadata":{"id":"wlY-h7eVVF8u"},"output":{"0":{"name":"stdout","output_type":"stream","text":"dict_keys(['Shezentai', 'Choku-Zuki', 'Oi-Zuki', 'Gyaku-Zuki', 'Gedan Barai', 'Age-Uke'])\n"}},"pos":18,"type":"cell"}
{"cell_type":"markdown","id":"0a9260","input":"### String Formatting\nChange the code below to see how you can format strings.","metadata":{"id":"wDh9B_Prfkgr"},"pos":10,"type":"cell"}
{"cell_type":"markdown","id":"0ac64a","input":"## Task 3: Set up the game\n\nNow here is where we set up the game!\n\n* Create a variable to keep track of how many guesses user has correct\n* Create a loop that:\n\n> 1. Goes through each word in the list of keys and print this word for the user to guess.\n\n2. Asks the user to `input` their answer (you might have to look up how to get input from a user in python).\n3. Checks whether their answer is right, and adds 1 to the variable for correct guesses \n4. Goes to the next word and repeats steps 1-3.\n\n* After the loop, print how many answers the users got correct and how many they got wrong.\n\n<br>\n\nNote: For repetitive tasks in python, we usually use a `while` or a `for` loop. `While` loops continue executing code in a loop until a certain condition is met, and `for` loops typically are used for iterating across a piece of data. \n\n> DISCUSS: Discuss with your team and instructor which type of loop would be better for this case.\n\n","metadata":{"id":"EL8bZ5XLVF8z"},"pos":22,"type":"cell"}
{"cell_type":"markdown","id":"43b543","input":"## Task 1: Create the Flashcards \nIn this section you should create your flashcards using a dictionary that includes each karate stance (key) and its definition (value).\n\nExperiment by using some dictionary functions and save the keys of the dictionary in a list.","metadata":{"id":"HxiI3weuVF8t"},"pos":16,"type":"cell"}
{"cell_type":"markdown","id":"7d1345","input":"## Some python help\n\nHere is some python code that might help you on your journey! Mainly you should have a good idea of how dictionaries function, since they work pretty similar to flashcards.","metadata":{"id":"RHa0Vb_rXjQr"},"pos":2,"type":"cell"}
{"cell_type":"markdown","id":"a4f567","input":"## The Stances!\n\nHere are the stances:\n\n* Shezentai: Natural Stance\n* Choku-Zuki: Straight Punch\n* Oi-Zuki: Front Lunge Punch\n* Gyaku-Zuki: Reverse Punch\n* Gedan Barai: Down Block\n* Age-Uke: Rising Block\n\nIf you're curious here are some photos of the stances. \n<br>\n<br>\n\n<center />\n<img src=\"https://globalmartialarts.university/wp-content/uploads/2021/01/Shotokan-Beginners-Guide-Infographic-2.jpg\" width=560 height=660 />\n\n","metadata":{"id":"cuw7LZy3VF8q"},"pos":1,"type":"cell"}
{"cell_type":"markdown","id":"c28233","input":"# Build a Flashcard Game! \n\nWe will be building a flashcard guessing game where users can guess fighting stances in Karate.\n\n\n\n> Here are the rules:\n* The user will be given the name of a fighting stance and will have to guess its definition/description.\n* Each time the user guesses the description right, the user gets a point.\n* The game will continue until there are no more stance descriptions left to guess.\n* After running out of stances, the user will see how many points they earn and will be asked if they want to play again!\n\nYou can think of this as having the front of the flash card being a fighting stance and the back of the flash card being it's description. Let's get started.\n\n\n\n","metadata":{"id":"jQu4NqtgVF8l"},"pos":0,"type":"cell"}
{"cell_type":"markdown","id":"cd24be","input":"### Dictionaries Review","metadata":{"id":"yr1mQTCVfmhM"},"pos":3,"type":"cell"}
{"cell_type":"markdown","id":"da9b01","input":"## Task 4: Put everything together. \n\nCreate an outer loop to ask the user if they want to play the game. If the answer is yes, keep running the program. Keep doing this until they enter something other than yes. \n\nConsolidate all of your other code inside of this loop!\n\n","metadata":{"id":"mYVCZ2RKVF80"},"pos":24,"type":"cell"}
{"cell_type":"markdown","id":"e02224","input":"## Task 2: Shuffle the list \n\nAt this point we have a \"deck\" of flashcards (a list of key values for our dictionary). Now you should do some research on how we can `shuffle()` this deck. \n\nWe recommend checking out python's [`random` library](https://docs.python.org/3/library/random.html) to see how to shuffle a list! You also could google \"how to shuffle a list python\".\n\n","metadata":{"id":"acolMI3gVF8w"},"pos":20,"type":"cell"}
{"id":0,"time":1656520149894,"type":"user"}
{"last_load":1656510856386,"type":"file"}