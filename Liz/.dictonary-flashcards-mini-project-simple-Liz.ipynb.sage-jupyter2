{"backend_state":"running","connection_file":"/projects/6a848d56-5da1-43fb-bfc9-9172977ceeb4/.local/share/jupyter/runtime/kernel-d05df64b-bb40-4952-9341-dc9d350367e9.json","kernel":"nlp_env","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"name":"python"},"orig_nbformat":4},"trust":true,"type":"settings"}
{"cell_type":"code","end":1656362220029,"exec_count":1,"id":"e43eef","input":"dict = {'key0':'value0', 'key1':'value1'}","kernel":"nlp_env","metadata":{"vscode":{"languageId":"plaintext"}},"pos":3,"start":1656362220016,"state":"done","type":"cell"}
{"cell_type":"code","end":1656362222243,"exec_count":2,"id":"c197df","input":"print(dict['key1'])","kernel":"nlp_env","metadata":{"vscode":{"languageId":"plaintext"}},"output":{"0":{"name":"stdout","text":"value1\n"}},"pos":5,"start":1656362222237,"state":"done","type":"cell"}
{"cell_type":"code","end":1656362225390,"exec_count":3,"id":"bcd759","input":"dict['key2'] = 'value2'\nprint(dict)","kernel":"nlp_env","metadata":{"vscode":{"languageId":"plaintext"}},"output":{"0":{"name":"stdout","text":"{'key0': 'value0', 'key1': 'value1', 'key2': 'value2'}\n"}},"pos":7,"start":1656362225377,"state":"done","type":"cell"}
{"cell_type":"code","end":1656362227389,"exec_count":4,"id":"a002e3","input":"del dict['key2']\nprint(dict)","kernel":"nlp_env","metadata":{"vscode":{"languageId":"plaintext"}},"output":{"0":{"name":"stdout","text":"{'key0': 'value0', 'key1': 'value1'}\n"}},"pos":9,"start":1656362227359,"state":"done","type":"cell"}
{"cell_type":"code","end":1656362229594,"exec_count":5,"id":"2ae3c8","input":"flashcards = {      #dictionary/key pairs for definitions\n    \"shizentai\"   : \"natural stance\",\n    \"choku-zuki\"  : \"straight punch\",\n    \"oi-zuki\"     : \"front lunge punch\",\n    \"gyaku-zuki\"  : \"reverse punch\",\n    \"gedan barai\" : \"down block\",\n    \"age-uke\"     : \"rising block\"\n    }","kernel":"nlp_env","metadata":{"vscode":{"languageId":"plaintext"}},"pos":11,"start":1656362229578,"state":"done","type":"cell"}
{"cell_type":"code","end":1656362355988,"exec_count":6,"id":"673f91","input":"dict = {'key0':'value0', 'key1':'value1', 'key2':'value2'}","kernel":"nlp_env","metadata":{"vscode":{"languageId":"plaintext"}},"pos":14,"start":1656362355972,"state":"done","type":"cell"}
{"cell_type":"code","end":1656362369143,"exec_count":8,"id":"0151c2","input":"for key, value in dict.items():\n    print(key,value)","kernel":"nlp_env","metadata":{"vscode":{"languageId":"plaintext"}},"output":{"0":{"name":"stdout","text":"key0 value0\nkey1 value1\nkey2 value2\n"}},"pos":16,"start":1656362369136,"state":"done","type":"cell"}
{"cell_type":"code","end":1656362415036,"exec_count":9,"id":"7ab831","input":"guess = input()","kernel":"nlp_env","metadata":{"vscode":{"languageId":"plaintext"}},"output":{"0":{"name":"input","opts":{"password":false,"prompt":""},"value":"hello"}},"pos":18,"start":1656362405774,"state":"done","type":"cell"}
{"cell_type":"code","end":1656362455024,"exec_count":10,"id":"10754f","input":"guess = input('enter your guess')\n# or\nprompt = 'enter your guess'\nguess = input(prompt)","kernel":"nlp_env","metadata":{"vscode":{"languageId":"plaintext"}},"output":{"0":{"name":"input","opts":{"password":false,"prompt":"enter your guess"},"value":"hello"},"1":{"name":"input","opts":{"password":false,"prompt":"enter your guess"},"value":"hello"}},"pos":20,"start":1656362444382,"state":"done","type":"cell"}
{"cell_type":"code","end":1656362573028,"exec_count":13,"id":"1804c7","input":"for key, value in flashcards.items():\n    prompt = 'enter your guess'\n    guess = input(prompt)\n\n    check(guess, key)","kernel":"nlp_env","metadata":{"vscode":{"languageId":"plaintext"}},"output":{"0":{"name":"input","opts":{"password":false,"prompt":"enter your guess"}},"1":{"ename":"KeyboardInterrupt","evalue":"Interrupted by user","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","Input \u001b[0;32mIn [13]\u001b[0m, in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m key, value \u001b[38;5;129;01min\u001b[39;00m flashcards\u001b[38;5;241m.\u001b[39mitems():\n\u001b[1;32m      2\u001b[0m     prompt \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124menter your guess\u001b[39m\u001b[38;5;124m'\u001b[39m\n\u001b[0;32m----> 3\u001b[0m     guess \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43minput\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mprompt\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m      5\u001b[0m     check(guess, key)\n","File \u001b[0;32m~/miniconda3/envs/nlp_env/lib/python3.8/site-packages/ipykernel/kernelbase.py:1075\u001b[0m, in \u001b[0;36mKernel.raw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m   1071\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_allow_stdin:\n\u001b[1;32m   1072\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m StdinNotImplementedError(\n\u001b[1;32m   1073\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mraw_input was called, but this frontend does not support input requests.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m   1074\u001b[0m     )\n\u001b[0;32m-> 1075\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_input_request\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   1076\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43mstr\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mprompt\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1077\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_parent_ident\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mshell\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1078\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_parent\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mshell\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1079\u001b[0m \u001b[43m    \u001b[49m\u001b[43mpassword\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[1;32m   1080\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m~/miniconda3/envs/nlp_env/lib/python3.8/site-packages/ipykernel/kernelbase.py:1120\u001b[0m, in \u001b[0;36mKernel._input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m   1117\u001b[0m             \u001b[38;5;28;01mbreak\u001b[39;00m\n\u001b[1;32m   1118\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyboardInterrupt\u001b[39;00m:\n\u001b[1;32m   1119\u001b[0m     \u001b[38;5;66;03m# re-raise KeyboardInterrupt, to truncate traceback\u001b[39;00m\n\u001b[0;32m-> 1120\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyboardInterrupt\u001b[39;00m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mInterrupted by user\u001b[39m\u001b[38;5;124m\"\u001b[39m) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;28mNone\u001b[39m\n\u001b[1;32m   1121\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m:\n\u001b[1;32m   1122\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mlog\u001b[38;5;241m.\u001b[39mwarning(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mInvalid Message:\u001b[39m\u001b[38;5;124m\"\u001b[39m, exc_info\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: Interrupted by user"]}},"pos":22,"start":1656362563434,"state":"done","type":"cell"}
{"cell_type":"code","end":1656362638659,"exec_count":14,"id":"317d60","input":"guess = 'English is a good language'\nanswer = 'Python is the best language!'\nif guess == answer:\n    print('goood job! you got it right!')\nelse:\n    print('To bad. The answer was:', answer) # note: when the print function is given 2 inputs, it prints both seperated by a space","kernel":"nlp_env","metadata":{"vscode":{"languageId":"plaintext"}},"output":{"0":{"name":"stdout","text":"To bad. The answer was: Python is the best language!\n"}},"pos":26,"start":1656362638636,"state":"done","type":"cell"}
{"cell_type":"code","end":1656362650772,"exec_count":15,"id":"34f8b8","input":"print('PythOn'.lower())\nprint('python'.lower())\nprint('PythOn'.lower()=='python'.lower())","kernel":"nlp_env","metadata":{"vscode":{"languageId":"plaintext"}},"output":{"0":{"name":"stdout","text":"python\npython\nTrue\n"}},"pos":28,"start":1656362650734,"state":"done","type":"cell"}
{"cell_type":"code","end":1656362661674,"exec_count":16,"id":"aec34d","input":"def func():\n    pass # pass just means there's nothing here - stops the code from breaking","kernel":"nlp_env","metadata":{"vscode":{"languageId":"plaintext"}},"pos":30,"start":1656362661665,"state":"done","type":"cell"}
{"cell_type":"code","end":1656362666850,"exec_count":17,"id":"b1bd22","input":"def param(arg0, arg1):\n    print(arg0, arg1)","kernel":"nlp_env","metadata":{"vscode":{"languageId":"plaintext"}},"pos":32,"start":1656362666840,"state":"done","type":"cell"}
{"cell_type":"code","end":1656362677780,"exec_count":18,"id":"69d743","input":"param('AI','CAMP')","kernel":"nlp_env","metadata":{"vscode":{"languageId":"plaintext"}},"output":{"0":{"name":"stdout","text":"AI CAMP\n"}},"pos":34,"start":1656362677774,"state":"done","type":"cell"}
{"cell_type":"code","end":1656362683473,"exec_count":19,"id":"00424f","input":"def ret():\n    return 'Bananas'","kernel":"nlp_env","metadata":{"vscode":{"languageId":"plaintext"}},"pos":36,"start":1656362683430,"state":"done","type":"cell"}
{"cell_type":"code","end":1656362687443,"exec_count":20,"id":"9c0d1a","input":"val = ret()\nprint(val)","kernel":"nlp_env","metadata":{"vscode":{"languageId":"plaintext"}},"output":{"0":{"name":"stdout","text":"Bananas\n"}},"pos":38,"start":1656362687423,"state":"done","type":"cell"}
{"cell_type":"code","end":1656362978481,"exec_count":28,"id":"2a2d0b","input":"counter = 0\ndef inc():\n    global counter\n    counter += 1\n\ninc()\ncounter","kernel":"nlp_env","metadata":{"vscode":{"languageId":"plaintext"}},"output":{"0":{"data":{"text/plain":"1"},"exec_count":28}},"pos":40,"start":1656362978474,"state":"done","type":"cell"}
{"cell_type":"code","end":1656363013088,"exec_count":29,"id":"23d311","input":"print('counter value:', counter)","kernel":"nlp_env","metadata":{"vscode":{"languageId":"plaintext"}},"output":{"0":{"name":"stdout","text":"counter value: 1\n"}},"pos":42,"start":1656363013069,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":33,"id":"fbf421","input":"for key, value in flashcards.items():\n\n    prompt = 'enter your guess for ' + value\n    guess = input(prompt)\n\n    check(guess, key)\n\n    print(\"Thank you for playing!\")","kernel":"nlp_env","metadata":{"vscode":{"languageId":"plaintext"}},"output":{"0":{"name":"input","opts":{"password":false,"prompt":"enter your guess fornatural stance"},"value":"hello"},"1":{"name":"stdout","text":"To bad. The answer was: shizentai\n"},"10":{"name":"input","opts":{"password":false,"prompt":"enter your guess forrising block"},"value":"age-uke"},"11":{"name":"stdout","text":"goood job! you got it right!\ncurrent score:  4\n"},"2":{"name":"input","opts":{"password":false,"prompt":"enter your guess forstraight punch"},"value":"choku-zuki"},"3":{"name":"stdout","text":"goood job! you got it right!\ncurrent score:  1\n"},"4":{"name":"input","opts":{"password":false,"prompt":"enter your guess forfront lunge punch"},"value":"oi-zuki"},"5":{"name":"input","opts":{"password":false,"prompt":"enter your guess forreverse punch"}},"6":{"name":"stdout","text":"goood job! you got it right!\ncurrent score:  2\n","value":"hello"},"7":{"name":"stdout","text":"To bad. The answer was: gyaku-zuki\n"},"8":{"name":"input","opts":{"password":false,"prompt":"enter your guess fordown block"},"value":"gedan barai"},"9":{"name":"stdout","text":"goood job! you got it right!\ncurrent score:  3\n"}},"pos":44,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"06d473","input":"Aditionally, we can add an entry like this:","pos":6,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"0a4788","input":"A function can also take in parameters (the number isn't limited):","pos":31,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"156b71","input":"<h1>Running the loop</h1>","pos":12,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"1cfc6e","input":"But how will the student know what to write? To adress this, the input function allows us to give a prompt","pos":19,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"27afb8","input":"when your piece works, add the code check(v1,v2) to the end of your loop (where v1 is the name of your guess variable, and v2 is the name of the answer)\n\n","pos":23,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"28e801","input":"Then we can call it like this:","pos":33,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"2aa13d","input":"Notice the curly braces, which denote a dictionary, and the colon, which pairs the key and the value. The values paired together can be anything.\n\nThis pairing allows us to access the value like this (and we can print with the print() statement):","pos":4,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"3c8588","input":"This loops through each pair in the dictionary, saving the key to the variable key, and the value to the variable value\n\nNow that we have the keys, we can collect the user's guess using the input function and assign the result to a variable","pos":17,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"406907","input":"<h1>Validating guesses</h1>","pos":24,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"40a10c","input":"Now put this all together: (if you want to use return, you can work to integrate it with your team)\n\n","pos":43,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"56f737","input":"Now you can put it together to make the loop:\n\n","pos":21,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"655671","input":"And finally, we can remove an entry like this:","pos":8,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"8ec307","input":"If you have a variable, you can also increment it in a function, like this","pos":39,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"94a19c","input":"<h3>The Flashcards</h3>","pos":1,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"a36f48","input":"Additionally, a function can hand back a value using a return statement","pos":35,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"ac9248","input":"For this section, we will be creating the game loop. To do that, we need a dictionary. A sample of that is supplied here (make sure to run the next cell, but you don't need to do anything with it)","pos":13,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"b7567a","input":"Now make a dictionary of the flashcards (name it flashcards so other code syncs together) (the definition should be the key)\n\n","pos":10,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"ca37c1","input":"In python, we can create a dictionary like this:","pos":2,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"d61362","input":"When we have this dictionary, we can run through it with a for loop like this:","pos":15,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"df4c21","input":"<h1>Flash Card Mini Project</h1>\nThis is a project covering a range of python topics, from storage to functions. This lets you define flashcards, then test your knowledge against them.\n\nThis project is broken into 3 parts. The first covers creating and storing the flashcards, the second covers creating the loop, and the third covers validating the input","pos":0,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"e38ced","input":"This value can then be accessed as follows: (If you use parameters, the value can change based on the situation)","pos":37,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"eac5c8","input":"We can compare our guess with the answer using an if else block","pos":25,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"ed5bf9","input":"To make this easier, we can package this all into a function, which we can define as follows:","pos":29,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"ee7d02","input":"Then print it like this","pos":41,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"fe74f5","input":"But what if our user enters 'Python' and we wanted 'python' or the other way around? to do this, we make the cases match:","pos":27,"state":"done","type":"cell"}
{"end":1656363273268,"exec_count":30,"id":"59c45a","input":"flashcards = {      #dictionary/key pairs for definitions\n    \"shizentai\"   : \"natural stance\",\n    \"choku-zuki\"  : \"straight punch\",\n    \"oi-zuki\"     : \"front lunge punch\",\n    \"gyaku-zuki\"  : \"reverse punch\",\n    \"gedan barai\" : \"down block\",\n    \"age-uke\"     : \"rising block\"\n    }","kernel":"nlp_env","pos":43.125,"start":1656363273222,"state":"done","type":"cell"}
{"end":1656363275158,"exec_count":31,"id":"04aa4f","input":"counter = 0\n\ndef inc():\n    global counter\n    counter += 1\n    return counter","kernel":"nlp_env","pos":43.25,"start":1656363275139,"state":"done","type":"cell"}
{"end":1656363276630,"exec_count":32,"id":"a1e6a3","input":"def check(guess, key):\n\n    if guess.lower() == key.lower():\n        print('goood job! you got it right!')\n        counter = inc()\n        print('current score: ', counter)\n    else:\n        print('To bad. The answer was:', key)","kernel":"nlp_env","pos":43.5,"start":1656363276625,"state":"done","type":"cell"}
{"id":0,"time":1656361927178,"type":"user"}
{"last_load":1656362025615,"type":"file"}